// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_CONFIG = {
    version: '2.2.0',
    build: '2024.01.15',
    lastUpdate: new Date().toISOString(),
    adminPassword: 'hamster2024',
    autoRefresh: true,
    dataSources: {
        price: 'https://api.coingecko.com/api/v3/simple/price?ids=hamster&vs_currencies=usd&include_24hr_change=true',
        news: 'https://raw.githubusercontent.com/YOUR_USERNAME/hamster-verse-data/main/news.json'
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
const FEEDBACK_CONFIG = {
    botToken: '', // –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    chatId: '',   // –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à chat_id
    enabled: false // –í–∫–ª—é—á–∏—Ç–µ –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω
};

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const BACKUP_DATA = {
    price: 0.000621,
    change: 2.34,
    news: [
        {
            id: 1,
            date: new Date().toISOString(),
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hamster Verse!",
            content: "–ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ª—É—á—à–∏–º–∏ –∏–≥—Ä–∞–º–∏ –æ—Ç Hamster. –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!",
            important: true,
            type: "update"
        },
        {
            id: 2,
            date: new Date(Date.now() - 86400000).toISOString(),
            title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã",
            content: "–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏–≥—Ä—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!",
            important: false,
            type: "update"
        }
    ]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    console.log('üöÄ Hamster Verse v' + APP_CONFIG.version + ' initializing...');
    
    try {
        setupNavigation();
        setupPlayButtons();
        setupTelegramIntegration();
        setupPriceData();
        setupGuideButton();
        setupThemeToggle();
        setupNewsSection();
        setupRatingSystem();
        setupShareButton();
        setupFeedbackSystem();
        setupAdminButton();
        setupAutoRefresh();
        setupErrorHandling();
        setupDailyRewards();
        setupGameStatistics();
        setupNewsFilters();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await loadInitialData();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
        document.getElementById('app-version').textContent = APP_CONFIG.version;
        document.getElementById('app-build').textContent = APP_CONFIG.build;
        
        console.log('‚úÖ Hamster Verse initialized successfully');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ –∑–∞–ø—É—Å–∫–µ
        sendAnalytics('app_launched', { version: APP_CONFIG.version });
        
    } catch (error) {
        console.error('‚ùå App initialization failed:', error);
        showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    await Promise.all([
        fetchRealPriceData(),
        loadNewsFromGitHub()
    ]);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    const sections = document.querySelectorAll('.content-section');
    
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            const targetSection = this.getAttribute('data-section');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            navItems.forEach(nav => nav.classList.remove('active'));
            this.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
            sections.forEach(section => {
                section.classList.remove('active');
                if (section.id === targetSection) {
                    section.classList.add('active');
                }
            });
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–π
            if (targetSection === 'hmstr-section') {
                refreshPriceData();
            } else if (targetSection === 'news-section') {
                loadNewsFromGitHub();
            } else if (targetSection === 'games-section') {
                updateGamesStats();
            } else if (targetSection === 'profile-section') {
                updateProfileStats();
            }
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
            sendAnalytics('section_switched', { section: targetSection });
        });
    });
}

// –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä
function setupPlayButtons() {
    const playButtons = document.querySelectorAll('.play-button');
    
    playButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            const url = this.getAttribute('data-url');
            openGame(url);
        });
    });
    
    // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã (–∫—Ä–æ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const gameCards = document.querySelectorAll('.game-card');
    
    gameCards.forEach(card => {
        card.addEventListener('click', function(e) {
            if (!e.target.classList.contains('star') && !e.target.closest('.stars')) {
                const playButton = this.querySelector('.play-button');
                const url = playButton.getAttribute('data-url');
                openGame(url);
            }
        });
    });
}

function openGame(url) {
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    const gameCard = event.target.closest('.game-card');
    const gameId = gameCard?.getAttribute('data-game-id');
    sendAnalytics('game_launched', { gameId, url });
    
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.openLink(url);
    } else {
        window.open(url, '_blank', 'noopener,noreferrer');
    }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
function setupTelegramIntegration() {
    if (window.Telegram && window.Telegram.WebApp) {
        // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        window.Telegram.WebApp.expand();
        
        const user = window.Telegram.WebApp.initDataUnsafe?.user;
        
        if (user) {
            updateUserProfile(user);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        window.Telegram.WebApp.MainButton.setText('üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—ã');
        window.Telegram.WebApp.MainButton.show();
        window.Telegram.WebApp.MainButton.onClick(function() {
            switchToSection('games-section');
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã Telegram
        if (window.Telegram.WebApp.colorScheme === 'dark') {
            setTheme('dark');
        }
        
    } else {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        simulateUserProfile();
    }
}

function updateUserProfile(user) {
    const avatar = document.getElementById('tg-avatar');
    const headerAvatar = document.getElementById('user-avatar');
    const name = document.getElementById('tg-name');
    const username = document.getElementById('tg-username');
    
    if (user.photo_url) {
        avatar.innerHTML = `<img src="${user.photo_url}" alt="Avatar" style="width: 100%; height: 100%; border-radius: 50%;">`;
        headerAvatar.innerHTML = `<img src="${user.photo_url}" alt="Avatar" style="width: 100%; height: 100%; border-radius: 50%;">`;
    } else {
        const initial = user.first_name?.[0] || 'U';
        avatar.textContent = initial;
        headerAvatar.textContent = initial;
    }
    
    if (user.first_name) {
        name.textContent = `${user.first_name} ${user.last_name || ''}`.trim();
    }
    
    if (user.username) {
        username.textContent = `@${user.username}`;
    } else {
        username.textContent = 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
}

function simulateUserProfile() {
    const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π'];
    const surnames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–∏–¥–æ—Ä–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞', '–ü–æ–ø–æ–≤'];
    const usernames = ['alexey', 'maria', 'dmitry', 'anna', 'sergey'];
    
    const randomIndex = Math.floor(Math.random() * names.length);
    const name = names[randomIndex];
    const surname = surnames[randomIndex];
    const username = usernames[randomIndex];
    
    document.getElementById('tg-name').textContent = `${name} ${surname}`;
    document.getElementById('tg-username').textContent = `@${username}`;
}

// –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ HMSTR
let currentPriceData = {
    usd: BACKUP_DATA.price,
    change: BACKUP_DATA.change,
    lastUpdated: new Date().toISOString()
};

function setupPriceData() {
    loadPriceData();
    updatePriceDisplay();
}

function loadPriceData() {
    const savedData = localStorage.getItem('hmstr_price_data');
    if (savedData) {
        currentPriceData = JSON.parse(savedData);
    }
}

function savePriceData() {
    localStorage.setItem('hmstr_price_data', JSON.stringify(currentPriceData));
}

function updatePriceDisplay() {
    const usdPriceElement = document.getElementById('hmstr-price-usd');
    const usdChangeElement = document.getElementById('hmstr-change-usd');
    
    if (usdPriceElement) {
        usdPriceElement.textContent = `$${currentPriceData.usd.toFixed(6)}`;
    }
    
    if (usdChangeElement) {
        usdChangeElement.textContent = `${currentPriceData.change >= 0 ? '+' : ''}${currentPriceData.change.toFixed(2)}%`;
        usdChangeElement.className = `change ${currentPriceData.change >= 0 ? 'positive' : 'negative'}`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±—ä–µ–º (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
    const marketCapElement = document.getElementById('market-cap');
    const volumeElement = document.getElementById('volume-24h');
    
    if (marketCapElement) {
        const marketCap = (currentPriceData.usd * 20000000000).toFixed(1); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        marketCapElement.textContent = `$${marketCap}M`;
    }
    
    if (volumeElement) {
        const volume = (currentPriceData.usd * 2000000).toFixed(1); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        volumeElement.textContent = `$${volume}M`;
    }
}

async function fetchRealPriceData() {
    try {
        showPriceLoading(true);
        
        const response = await fetch(APP_CONFIG.dataSources.price);
        if (response.ok) {
            const data = await response.json();
            if (data.hamster) {
                currentPriceData.usd = data.hamster.usd;
                currentPriceData.change = data.hamster.usd_24h_change;
                currentPriceData.lastUpdated = new Date().toISOString();
                savePriceData();
                updatePriceDisplay();
                showPriceLoading(false);
                return;
            }
        }
    } catch (error) {
        console.log('Using backup price data');
    }
    
    // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    currentPriceData = {
        usd: BACKUP_DATA.price,
        change: BACKUP_DATA.change,
        lastUpdated: new Date().toISOString()
    };
    updatePriceDisplay();
    showPriceLoading(false);
}

function refreshPriceData() {
    fetchRealPriceData();
}

function showPriceLoading(show) {
    const loadingElement = document.getElementById('price-loading');
    if (loadingElement) {
        loadingElement.classList.toggle('hidden', !show);
    }
}

// –ì–∞–π–¥ –ø–æ–∫—É–ø–∫–∏ HMSTR
function setupGuideButton() {
    const guideButton = document.getElementById('show-guide');
    const buyGuide = document.getElementById('buy-guide');
    
    if (guideButton && buyGuide) {
        guideButton.addEventListener('click', function() {
            const isHidden = buyGuide.classList.contains('hidden');
            
            if (isHidden) {
                buyGuide.classList.remove('hidden');
                guideButton.textContent = 'üìñ –°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é';
                sendAnalytics('guide_opened', { type: 'buy_guide' });
            } else {
                buyGuide.classList.add('hidden');
                guideButton.textContent = 'üìñ –ö–∞–∫ –∫—É–ø–∏—Ç—å HMSTR';
            }
        });
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function setupThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = themeToggle.querySelector('.theme-icon');
    const themeText = themeToggle.querySelector('.theme-text');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
    
    themeToggle.addEventListener('click', function() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
        sendAnalytics('theme_changed', { theme: newTheme });
    });
    
    function setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
        
        if (theme === 'dark') {
            themeIcon.textContent = '‚òÄÔ∏è';
            themeText.textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
        } else {
            themeIcon.textContent = 'üåô';
            themeText.textContent = '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
        }
    }
}

// –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
function setupRatingSystem() {
    const starsContainers = document.querySelectorAll('.stars');
    
    starsContainers.forEach(container => {
        const stars = container.querySelectorAll('.star');
        const gameId = container.getAttribute('data-game-id');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        loadRating(gameId, container);
        
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                rateGame(gameId, rating, container);
            });
            
            star.addEventListener('mouseover', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                highlightStars(stars, rating);
            });
            
            star.addEventListener('mouseout', function() {
                const savedRating = getSavedRating(gameId);
                highlightStars(stars, savedRating);
            });
        });
    });
}

function loadRating(gameId, container) {
    const savedRating = getSavedRating(gameId);
    const stars = container.querySelectorAll('.star');
    
    highlightStars(stars, savedRating);
    updateRatingText(gameId, savedRating);
}

function getSavedRating(gameId) {
    const ratings = JSON.parse(localStorage.getItem('game_ratings') || '{}');
    return ratings[gameId] || 0;
}

function saveRating(gameId, rating) {
    const ratings = JSON.parse(localStorage.getItem('game_ratings') || '{}');
    ratings[gameId] = rating;
    localStorage.setItem('game_ratings', JSON.stringify(ratings));
}

function rateGame(gameId, rating, container) {
    saveRating(gameId, rating);
    
    const stars = container.querySelectorAll('.star');
    highlightStars(stars, rating);
    updateRatingText(gameId, rating);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    const clickedStar = container.querySelector(`.star[data-rating="${rating}"]`);
    clickedStar.classList.add('just-rated');
    setTimeout(() => clickedStar.classList.remove('just-rated'), 500);
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    sendAnalytics('game_rated', { gameId, rating });
    
    showNotification(`–û—Ü–µ–Ω–∫–∞ ${rating} ‚≠ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`, 'success');
}

function highlightStars(stars, rating) {
    stars.forEach(star => {
        const starRating = parseInt(star.getAttribute('data-rating'));
        star.classList.toggle('active', starRating <= rating);
        star.classList.toggle('rated', starRating <= rating);
    });
}

function updateRatingText(gameId, rating) {
    const container = document.querySelector(`.stars[data-game-id="${gameId}"]`).closest('.game-rating');
    const averageElement = container.querySelector('.average-rating');
    const countElement = container.querySelector('.rating-count');
    
    if (averageElement && rating > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        const currentRatings = JSON.parse(localStorage.getItem('game_ratings_stats') || '{}');
        currentRatings[gameId] = currentRatings[gameId] || { total: 0, count: 0 };
        currentRatings[gameId].total += rating;
        currentRatings[gameId].count += 1;
        
        const average = (currentRatings[gameId].total / currentRatings[gameId].count).toFixed(1);
        averageElement.textContent = average;
        
        localStorage.setItem('game_ratings_stats', JSON.stringify(currentRatings));
    }
    
    if (countElement && rating > 0) {
        const currentCount = parseInt(countElement.textContent) || 0;
        countElement.textContent = currentCount + 1;
    }
}

// –ù–æ–≤–æ—Å—Ç–∏
function setupNewsSection() {
    setupNewsFilters();
}

function setupNewsFilters() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const filter = this.getAttribute('data-filter');
            filterNews(filter);
        });
    });
}

async function loadNewsFromGitHub() {
    const newsContainer = document.getElementById('news-container');
    const loadingElement = document.getElementById('news-loading');
    
    if (loadingElement) {
        loadingElement.classList.remove('hidden');
    }
    
    try {
        const response = await fetch(APP_CONFIG.dataSources.news);
        if (response.ok) {
            const data = await response.json();
            const news = data.news || [];
            
            localStorage.setItem('cached_news', JSON.stringify(news));
            localStorage.setItem('news_last_update', new Date().toISOString());
            
            displayNews(news);
            
            if (loadingElement) {
                loadingElement.classList.add('hidden');
            }
            return;
        }
    } catch (error) {
        console.log('Using cached news from GitHub');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    const cachedNews = localStorage.getItem('cached_news');
    if (cachedNews) {
        displayNews(JSON.parse(cachedNews));
    } else {
        displayNews(BACKUP_DATA.news);
    }
    
    if (loadingElement) {
        loadingElement.classList.add('hidden');
    }
}

function displayNews(news) {
    const newsContainer = document.getElementById('news-container');
    
    if (!news || news.length === 0) {
        newsContainer.innerHTML = `
            <div class="news-item">
                <span class="news-date">${new Date().toLocaleDateString('ru-RU')}</span>
                <div class="news-title">–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
                <div class="news-content">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!</div>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    const sortedNews = news.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    newsContainer.innerHTML = sortedNews.map(item => `
        <div class="news-item ${item.important ? 'important' : ''}" data-type="${item.type || 'general'}">
            <span class="news-date">${formatDate(item.date)}</span>
            <div class="news-title">${item.title}</div>
            <div class="news-content">${item.content}</div>
            ${item.important ? '<div class="news-badge">–í–∞–∂–Ω–æ</div>' : ''}
        </div>
    `).join('');
}

function filterNews(filter) {
    const newsItems = document.querySelectorAll('.news-item');
    
    newsItems.forEach(item => {
        const type = item.getAttribute('data-type');
        
        switch (filter) {
            case 'all':
                item.style.display = 'block';
                break;
            case 'important':
                item.style.display = item.classList.contains('important') ? 'block' : 'none';
                break;
            case 'updates':
                item.style.display = type === 'update' ? 'block' : 'none';
                break;
            default:
                item.style.display = 'block';
        }
    });
}

// –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
function setupShareButton() {
    const shareButton = document.getElementById('share-button');
    
    if (shareButton) {
        shareButton.addEventListener('click', shareApp);
    }
}

function shareApp() {
    const shareText = "üéÆ –û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è Hamster Verse - –≤—Å–µ –ª—É—á—à–∏–µ –∏–≥—Ä—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è —Å–µ–π—á–∞—Å!";
    const shareUrl = window.location.href;
    
    sendAnalytics('share_attempted', { platform: 'telegram' });
    
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.shareUrl(shareUrl, shareText);
    } else if (navigator.share) {
        navigator.share({
            title: 'Hamster Verse',
            text: shareText,
            url: shareUrl
        });
    } else {
        // Fallback - –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        navigator.clipboard.writeText(shareUrl).then(() => {
            showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä!', 'success');
        }).catch(() => {
            showNotification('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é: ' + shareUrl, 'info');
        });
    }
}

// –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function setupFeedbackSystem() {
    const feedbackButton = document.getElementById('feedback-button');
    
    if (feedbackButton) {
        feedbackButton.addEventListener('click', openFeedbackModal);
    }
}

function openFeedbackModal() {
    const modal = document.getElementById('feedback-modal');
    modal.classList.remove('hidden');
    sendAnalytics('feedback_opened', {});
}

function closeFeedbackModal() {
    const modal = document.getElementById('feedback-modal');
    modal.classList.add('hidden');
}

function sendFeedback() {
    const textarea = document.getElementById('feedback-text');
    const feedback = textarea.value.trim();
    
    if (!feedback) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º feedback –ª–æ–∫–∞–ª—å–Ω–æ
    const feedbacks = JSON.parse(localStorage.getItem('user_feedback') || '[]');
    feedbacks.push({
        text: feedback,
        date: new Date().toISOString(),
        user: document.getElementById('tg-name').textContent
    });
    
    localStorage.setItem('user_feedback', JSON.stringify(feedbacks));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    sendAnalytics('feedback_submitted', { length: feedback.length });
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if (FEEDBACK_CONFIG.enabled && FEEDBACK_CONFIG.botToken && FEEDBACK_CONFIG.chatId) {
        sendFeedbackToTelegram(feedback);
    }
    
    showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!', 'success');
    closeFeedbackModal();
    textarea.value = '';
}

async function sendFeedbackToTelegram(feedback) {
    try {
        const user = document.getElementById('tg-name').textContent;
        const message = `üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç ${user}:\n\n${feedback}`;
        
        await fetch(`https://api.telegram.org/bot${FEEDBACK_CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: FEEDBACK_CONFIG.chatId,
                text: message
            })
        });
    } catch (error) {
        console.log('Failed to send feedback to Telegram');
    }
}

// –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function setupAdminButton() {
    const adminContainer = document.getElementById('admin-button-container');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç –ø–∞—Ä–æ–ª—å
    const isAdmin = localStorage.getItem('is_admin') === 'true';
    
    if (adminContainer) {
        adminContainer.style.display = isAdmin ? 'block' : 'none';
    }
    
    // –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
    let keySequence = '';
    document.addEventListener('keydown', function(e) {
        keySequence += e.key;
        if (keySequence.length > 10) {
            keySequence = keySequence.slice(-10);
        }
        
        if (keySequence.includes('hamster2024')) {
            localStorage.setItem('is_admin', 'true');
            setupAdminButton();
            showNotification('–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'success');
            keySequence = '';
        }
    });
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
function setupDailyRewards() {
    checkDailyReward();
}

function checkDailyReward() {
    const lastReward = localStorage.getItem('last_reward_date');
    const today = new Date().toDateString();
    const rewardSection = document.getElementById('daily-reward');
    
    if (lastReward !== today) {
        rewardSection.style.display = 'block';
        rewardSection.classList.add('reward-pulse');
        
        // –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–∞–≥—Ä–∞–¥–µ
        setTimeout(() => {
            showNotification('üéÅ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã!', 'info');
        }, 3000);
    } else {
        rewardSection.style.display = 'none';
    }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
function setupGameStatistics() {
    const stats = JSON.parse(localStorage.getItem('game_stats') || '{}');
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫–∏ –∏–≥—Ä
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('play-button')) {
            const gameCard = e.target.closest('.game-card');
            const gameId = gameCard.getAttribute('data-game-id');
            
            stats[gameId] = stats[gameId] || { plays: 0, lastPlayed: null };
            stats[gameId].plays++;
            stats[gameId].lastPlayed = new Date().toISOString();
            
            localStorage.setItem('game_stats', JSON.stringify(stats));
            sendAnalytics('game_played', { gameId, plays: stats[gameId].plays });
            
            // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
            localStorage.setItem('last_reward_date', new Date().toDateString());
            document.getElementById('daily-reward').style.display = 'none';
        }
    });
}

function updateGamesStats() {
    const stats = JSON.parse(localStorage.getItem('game_stats') || '{}');
    const statsSection = document.getElementById('games-stats');
    const statsGrid = document.getElementById('user-stats');
    
    if (Object.keys(stats).length > 0) {
        statsSection.style.display = 'block';
        
        let totalPlays = 0;
        Object.values(stats).forEach(gameStats => {
            totalPlays += gameStats.plays;
        });
        
        statsGrid.innerHTML = `
            <div class="stat-item">
                <span class="stat-value">${totalPlays}</span>
                <span class="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä</span>
            </div>
            <div class="stat-item">
                <span class="stat-value">${Object.keys(stats).length}</span>
                <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä</span>
            </div>
        `;
    } else {
        statsSection.style.display = 'none';
    }
}

function updateProfileStats() {
    const stats = JSON.parse(localStorage.getItem('game_stats') || '{}');
    const ratings = JSON.parse(localStorage.getItem('game_ratings') || '{}');
    
    let totalPlays = 0;
    Object.values(stats).forEach(gameStats => {
        totalPlays += gameStats.plays;
    });
    
    const ratingsGiven = Object.values(ratings).filter(r => r > 0).length;
    
    document.getElementById('games-played').textContent = totalPlays;
    document.getElementById('ratings-given').textContent = ratingsGiven;
}

// –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function setupAutoRefresh() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    setInterval(() => {
        if (document.querySelector('#hmstr-section.active')) {
            refreshPriceData();
        }
    }, 120000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
        if (document.querySelector('#news-section.active')) {
            loadNewsFromGitHub();
        }
    }, 1800000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
function setupErrorHandling() {
    window.addEventListener('error', function(e) {
        console.error('Global error:', e);
        sendAnalytics('error_occurred', { error: e.message, stack: e.error?.stack });
    });
    
    window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled promise rejection:', e);
        sendAnalytics('promise_rejection', { reason: e.reason?.message });
    });
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
function sendAnalytics(event, data) {
    const analytics = JSON.parse(localStorage.getItem('app_analytics') || '{}');
    
    // –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analytics.totalVisits = (analytics.totalVisits || 0) + 1;
    analytics.lastVisit = new Date().toISOString();
    analytics.events = analytics.events || [];
    
    analytics.events.push({ 
        event, 
        data, 
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        platform: window.Telegram?.WebApp?.platform || 'web'
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–±—ã—Ç–∏–π
    if (analytics.events.length > 100) {
        analytics.events = analytics.events.slice(-100);
    }
    
    localStorage.setItem('app_analytics', JSON.stringify(analytics));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ Telegram –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if (FEEDBACK_CONFIG.enabled && ['error_occurred', 'feedback_submitted'].includes(event)) {
        sendTelegramNotification(event, data);
    }
}

async function sendTelegramNotification(event, data) {
    if (!FEEDBACK_CONFIG.botToken || !FEEDBACK_CONFIG.chatId) return;
    
    const message = `üìä Hamster Verse Analytics\nEvent: ${event}\nData: ${JSON.stringify(data)}\nTime: ${new Date().toLocaleString()}`;
    
    try {
        await fetch(`https://api.telegram.org/bot${FEEDBACK_CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: FEEDBACK_CONFIG.chatId,
                text: message
            })
        });
    } catch (error) {
        console.log('Telegram notification failed');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function switchToSection(sectionId) {
    const navItem = document.querySelector(`.nav-item[data-section="${sectionId}"]`);
    if (navItem) {
        navItem.click();
    }
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) {
        return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diff < 3600000) {
        const minutes = Math.floor(diff / 60000);
        return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
    } else if (diff < 86400000) {
        const hours = Math.floor(diff / 3600000);
        return `${hours} —á. –Ω–∞–∑–∞–¥`;
    } else {
        return date.toLocaleDateString('ru-RU');
    }
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    notification.innerHTML = `
        <div class="notification-icon">${icons[type] || icons.info}</div>
        <div class="notification-content">
            <div class="notification-title">${type === 'success' ? '–£—Å–ø–µ—à–Ω–æ' : type === 'error' ? '–û—à–∏–±–∫–∞' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}</div>
            <div class="notification-message">${message}</div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.classList.add('slide-out');
        setTimeout(() => notification.remove(), 300);
    }, 4000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–Ω–æ–Ω—Å–∞
function closeAnnouncement() {
    const banner = document.getElementById('announcement');
    if (banner) {
        banner.style.display = 'none';
        localStorage.setItem('announcement_closed', 'true');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–Ω–æ–Ω—Å –∑–∞–∫—Ä—ã—Ç —Ä–∞–Ω–µ–µ
function checkAnnouncementState() {
    const isClosed = localStorage.getItem('announcement_closed');
    if (isClosed === 'true') {
        const banner = document.getElementById('announcement');
        if (banner) {
            banner.style.display = 'none';
        }
    }
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
        img.setAttribute('draggable', 'false');
    });
    
    checkAnnouncementState();
});

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideOutRight {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
    
    @keyframes starPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.3); }
        100% { transform: scale(1); }
    }
    
    .star.just-rated {
        animation: starPulse 0.5s ease;
    }
    
    .news-badge {
        background: var(--positive-color);
        color: white;
        padding: 2px 8px;
        border-radius: 8px;
        font-size: 10px;
        font-weight: 600;
        margin-top: 8px;
        display: inline-block;
    }
    
    .news-item.important {
        border-left: 4px solid var(--positive-color);
    }
`;
document.head.appendChild(style);
